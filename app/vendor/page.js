"use client";

import TopNav from "@/components/TopNav";
import {
    CheckCircleIcon,
    ClockIcon,
    DocumentTextIcon,
} from "@heroicons/react/24/outline";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { QrCode } from "lucide-react";
import QRCode from "qrcode";
import { useState } from "react";
import QRCodeReact from "react-qr-code";
import { QrReader } from "react-qr-reader";

// ✅ Dynamically import QR Reader to avoid SSR issues
// const QrReader = dynamic(() => import("react-qr-reader"), { ssr: false });

export default function VendorPage() {
    const [search, setSearch] = useState("");
    const [scanning, setScanning] = useState(false);

    const [activities, setActivities] = useState([
        {
            id: 20230817001,
            status: "Pending",
            items: [
                { id: 1, name: "Burger", quantity: 2, price: 50 },
                { id: 2, name: "Fries", quantity: 1, price: 25 },
            ],
        },
        {
            id: 20230817002,
            status: "Completed",
            items: [
                { id: 3, name: "Pizza", quantity: 1, price: 120 },
                { id: 4, name: "Soda", quantity: 2, price: 20 },
            ],
        },
    ]);

    const filteredActivities = activities.filter((activity) =>
        activity.id.toString().includes(search)
    );

    // ✅ Mark as Ready handler
    const markAsReady = (id) => {
        setActivities((prev) =>
            prev.map((activity) =>
                activity.id === id ? { ...activity, status: "Ready" } : activity
            )
        );
    };

    // ✅ QR Scan Handlers
    const handleScan = (data) => {
        if (data) {
            setSearch(data); // Fill search with QR result
            setScanning(false);
        }
    };

    const handleError = (err) => {
        console.error(err);
        setScanning(false);
    };
    // ✅ QR Scan Handlers
    const handleResult = (result, error) => {
        if (!!result) {
            setSearch(result?.text); // Fill search with QR code text
            setScanning(false);
        }

        if (!!error) {
            console.error(error);
            // don’t close scanning immediately, errors fire continuously
        }
    };
    const downloadActivity = async (activity) => {
        const doc = new jsPDF();

        // Branding Header
        doc.setFont("helvetica", "bold");
        doc.setFontSize(20);
        doc.setTextColor(0, 0, 0);
        doc.text("OrderSit", 105, 15, { align: "center" });

        // Order Header
        doc.setFontSize(18);
        doc.setTextColor(255, 87, 87);
        doc.text(`Order #${activity.id}`, 14, 30);

        doc.setFontSize(12);
        doc.setTextColor(255);
        doc.text(`Status: ${activity.status}`, 14, 40);
        doc.text(`Date: ${new Date(activity.id).toLocaleString()}`, 14, 48);

        // QR Code
        const qrDataUrl = await QRCode.toDataURL(activity.id.toString(), {
            color: { dark: "#f87171", light: "#ffffff00" },
            margin: 1,
            width: 100,
        });

        doc.setDrawColor(255, 87, 87);
        doc.setFillColor(30, 30, 30);
        doc.roundedRect(150, 25, 45, 45, 5, 5, "FD");
        doc.addImage(qrDataUrl, "PNG", 153, 28, 40, 40);

        // Table
        const tableData = activity.items.map((item) => [
            item.name,
            item.quantity.toString(),
            `E${item.price}`,
            `E${item.quantity * item.price}`,
        ]);

        autoTable(doc, {
            startY: 80,
            head: [["Item", "Qty", "Price", "Total"]],
            body: tableData,
            theme: "grid",
            headStyles: { fillColor: [180, 28, 28], textColor: 255, fontStyle: "bold" },
            bodyStyles: { fillColor: [40, 40, 40], textColor: 255 },
            alternateRowStyles: { fillColor: [30, 30, 30] },
            margin: { left: 14, right: 14 },
        });

        // Total
        const total = activity.items.reduce(
            (acc, item) => acc + item.price * item.quantity,
            0
        );
        const totalY = doc.lastAutoTable.finalY + 10;

        doc.setFillColor(180, 28, 28);
        doc.setTextColor(255);
        doc.roundedRect(14, totalY - 2, 50, 10, 2, 2, "F");
        doc.text(`Total: E${total}`, 16, totalY + 6);

        // Footer
        doc.setFontSize(10);
        doc.setTextColor(200);
        doc.text(
            "This document is electronically generated by OrderSit",
            105,
            290,
            { align: "center" }
        );

        doc.save(`Order_${activity.id}.pdf`);
    };

    return (
        // <div className="font-sans min-h-screen bg-gradient-to-b from-zinc-900 via-zinc-800 to-red-900">
        //     <TopNav />

        //     <main className="flex-1 max-w-3xl mx-auto w-full px-4 mb-15 sm:px-6 py-6 sm:py-8">
        //         {/* Search input + QR Scan */}
        //         <h1 className="mb-12"></h1>
        //         <div className="mb-12 sm:mb-12 flex gap-2 items-center">
        //             <input
        //                 type="text"
        //                 value={search}
        //                 onChange={(e) => setSearch(e.target.value)}
        //                 placeholder="Search by order number..."
        //                 className="w-full sm:w-1/2 px-4 py-2 rounded-2xl bg-zinc-800 text-white border border-red-700/50 focus:outline-none focus:ring-2 focus:ring-red-600 placeholder-gray-400"
        //             />
        //             <button
        //                 onClick={() => setScanning(true)}
        //                 className="px-4 py-2 bg-black text-white rounded-xl hover:bg-red-700 transition flex items-center gap-1"
        //             >
        //                 <QrCode size={18} /> Scan
        //             </button>
        //         </div>
        //         {scanning && (
        //             <div className="mb-6 p-4 bg-zinc-900 rounded-xl border border-red-700/50">
        //                 <QrReader
        //                     constraints={{ facingMode: "environment" }} // use back camera
        //                     onResult={handleResult}
        //                     style={{ width: "100%" }}
        //                 />
        //                 <button
        //                     onClick={() => setScanning(false)}
        //                     className="mt-3 px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition"
        //                 >
        //                     Cancel
        //                 </button>
        //             </div>
        //         )}
        //         {/* Activities */}
        //         {filteredActivities.length === 0 ? (
        //             <div className="flex flex-col items-center justify-center py-20 bg-zinc-900 rounded-xl shadow-md border border-red-700/30">
        //                 <DocumentTextIcon className="w-16 h-16 text-red-600 mb-4" />
        //                 <p className="text-gray-300 text-lg text-center">
        //                     No orders found.
        //                 </p>
        //             </div>
        //         ) : (
        //             <div className="flex flex-col gap-4 sm:gap-6">
        //                 {filteredActivities.map((activity) => {
        //                     const total = activity.items.reduce(
        //                         (acc, item) => acc + item.price * item.quantity,
        //                         0
        //                     );

        //                     return (
        //                         <div
        //                             key={activity.id}
        //                             className="bg-zinc-900 rounded-2xl shadow-md hover:shadow-2xl transition p-4 sm:p-6 border border-red-700/30"
        //                         >
        //                             {/* Order Header */}
        //                             <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-red-700/20 pb-3 sm:pb-4 mb-3 sm:mb-4">
        //                                 <h2 className="text-lg sm:text-xl font-semibold text-white flex items-center gap-2">
        //                                     <DocumentTextIcon className="w-5 h-5 text-red-500" />
        //                                     Order #{activity.id}
        //                                 </h2>
        //                                 <span
        //                                     className={`mt-2 sm:mt-0 inline-flex items-center gap-1 px-3 py-1 text-sm rounded-full font-medium ${activity.status === "Completed"
        //                                         ? "bg-green-900 text-green-400"
        //                                         : activity.status === "Ready"
        //                                             ? "bg-blue-900 text-blue-400"
        //                                             : "bg-red-900 text-red-400"
        //                                         }`}
        //                                 >
        //                                     {activity.status === "Completed" ? (
        //                                         <CheckCircleIcon className="w-4 h-4" />
        //                                     ) : (
        //                                         <ClockIcon className="w-4 h-4" />
        //                                     )}
        //                                     {activity.status}
        //                                 </span>
        //                             </div>

        //                             {/* Order Items */}
        //                             <div className="flex flex-col gap-2 sm:gap-3 mb-4">
        //                                 {activity.items.map((item) => (
        //                                     <div
        //                                         key={item.id}
        //                                         className="flex flex-col sm:flex-row justify-between items-start sm:items-center bg-zinc-800 p-3 sm:p-4 rounded-lg border border-red-700/20"
        //                                     >
        //                                         <div>
        //                                             <p className="font-medium text-white">
        //                                                 {item.name}
        //                                             </p>
        //                                             <p className="text-sm text-gray-400">
        //                                                 x {item.quantity} • E{item.price}
        //                                             </p>
        //                                         </div>
        //                                         <p className="font-semibold text-red-500 mt-2 sm:mt-0">
        //                                             E{item.price * item.quantity}
        //                                         </p>
        //                                     </div>
        //                                 ))}
        //                             </div>

        //                             {/* QR + Footer */}
        //                             <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-3 sm:mt-4 pt-3 sm:pt-4 border-t border-red-700/20 gap-4 sm:gap-0">
        //                                 <div className="bg-zinc-900 p-2 rounded-lg shadow border border-red-700/30 inline-block">
        //                                     <QRCodeReact
        //                                         value={activity.id.toString()}
        //                                         size={80}
        //                                         fgColor="#f87171"
        //                                     />
        //                                 </div>

        //                                 <p className="text-lg font-bold text-red-500 mt-2 sm:mt-0">
        //                                     Total: E{total}
        //                                 </p>
        //                                 <p className="text-gray-400 text-sm mt-1 sm:mt-0">
        //                                     {new Date(activity.id).toLocaleString()}
        //                                 </p>

        //                                 <div className="flex gap-2 ml-auto sm:ml-4 mt-2 sm:mt-0">
        //                                     {activity.status === "Pending" && (
        //                                         <button
        //                                             onClick={() => markAsReady(activity.id)}
        //                                             className="px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition shadow-md"
        //                                         >
        //                                             Mark as Ready
        //                                         </button>
        //                                     )}
        //                                     <button
        //                                         onClick={() => downloadActivity(activity)}
        //                                         className="px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition shadow-md flex items-center gap-2"
        //                                     >
        //                                         Download PDF
        //                                     </button>
        //                                 </div>
        //                             </div>
        //                         </div>
        //                     );
        //                 })}
        //             </div>
        //         )}
        //     </main>
        // </div>
        <div className="font-sans min-h-screen h-auto w-full bg-gradient-to-b from-black via-white to-yellow-400">
            <div className="flex flex-col min-h-screen">
                <TopNav />

                <main className="flex-1 max-w-3xl mx-auto w-full px-4 mb-15 sm:px-6 py-6 sm:py-8">
                    {/* Search input + QR Scan */}
                    <div className="mb-12 sm:mb-12 flex gap-2 items-center">
                        <input
                            type="text"
                            value={search}
                            onChange={(e) => setSearch(e.target.value)}
                            placeholder="Search by order number..."
                            className="w-full sm:w-1/2 px-4 py-2 rounded-2xl bg-white/80 text-black border border-yellow-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 placeholder-gray-600 backdrop-blur-sm"
                        />
                        <button
                            onClick={() => setScanning(true)}
                            className="px-4 py-2 bg-white/80 text-black rounded-xl hover:bg-yellow-400 transition flex items-center gap-1 backdrop-blur-sm"
                        >
                            <QrCode size={18} color="#eab308" /> Scan
                        </button>
                    </div>

                    {scanning && (
                        <div className="mb-6 p-4 bg-white/80 rounded-xl border border-yellow-400 backdrop-blur-sm">
                            <QrReader
                                constraints={{ facingMode: "environment" }}
                                onResult={handleResult}
                                style={{ width: "100%" }}
                            />
                            <button
                                onClick={() => setScanning(false)}
                                className="mt-3 px-4 py-2 bg-yellow-400 text-black rounded-xl hover:shadow-lg transition"
                            >
                                Cancel
                            </button>
                        </div>
                    )}

                    {/* Activities */}
                    {filteredActivities.length === 0 ? (
                        <div className="flex flex-col items-center justify-center py-20 bg-white/80 rounded-xl shadow-md border border-yellow-400 backdrop-blur-sm">
                            <DocumentTextIcon className="w-16 h-16 text-yellow-400 mb-4" />
                            <p className="text-black text-lg text-center">
                                No orders found.
                            </p>
                        </div>
                    ) : (
                        <div className="flex flex-col gap-4 sm:gap-6">
                            {filteredActivities.map((activity) => {
                                const total = activity.items.reduce(
                                    (acc, item) => acc + item.price * item.quantity,
                                    0
                                );

                                return (
                                    <div
                                        key={activity.id}
                                        className="bg-white/80 rounded-2xl shadow-md hover:shadow-2xl transition p-4 sm:p-6 border border-yellow-400 backdrop-blur-sm"
                                    >
                                        {/* Order Header */}
                                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-yellow-400/20 pb-3 sm:pb-4 mb-3 sm:mb-4">
                                            <h2 className="text-lg sm:text-xl font-semibold text-black flex items-center gap-2">
                                                <DocumentTextIcon className="w-5 h-5 text-yellow-400" />
                                                Order #{activity.id}
                                            </h2>
                                            <span
                                                className={`mt-2 sm:mt-0 inline-flex items-center gap-1 px-3 py-1 text-sm rounded-full font-medium ${activity.status === "Completed"
                                                        ? "bg-green-900 text-green-400"
                                                        : activity.status === "Pending"
                                                            ? "bg-yellow-900 text-yellow-400"
                                                            : "bg-white/50 text-black"
                                                    }`}
                                            >
                                                {activity.status === "Completed" ? (
                                                    <CheckCircleIcon className="w-4 h-4" />
                                                ) : (
                                                    <ClockIcon className="w-4 h-4" />
                                                )}
                                                {activity.status}
                                            </span>
                                        </div>

                                        {/* Order Items */}
                                        <div className="flex flex-col gap-2 sm:gap-3 mb-4">
                                            {activity.items.map((item) => (
                                                <div
                                                    key={item.id}
                                                    className="flex flex-col sm:flex-row justify-between items-start sm:items-center bg-white/70 p-3 sm:p-4 rounded-lg border border-yellow-400/30"
                                                >
                                                    <div>
                                                        <p className="font-medium text-black">
                                                            {item.name}
                                                        </p>
                                                        <p className="text-sm text-black/70">
                                                            x {item.quantity} • E{item.price}
                                                        </p>
                                                    </div>
                                                    <p className="font-semibold text-yellow-400 mt-2 sm:mt-0">
                                                        E{item.price * item.quantity}
                                                    </p>
                                                </div>
                                            ))}
                                        </div>

                                        {/* QR + Footer */}
                                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-3 sm:mt-4 pt-3 sm:pt-4 border-t border-yellow-400/20 gap-4 sm:gap-0">
                                            <div className="bg-white/80 p-2 rounded-lg shadow border border-yellow-400 inline-block backdrop-blur-sm">
                                                <QRCodeReact
                                                    value={activity.id.toString()}
                                                    size={80}
                                                    fgColor="#eab308"
                                                />
                                            </div>

                                            <p className="text-lg font-bold text-yellow-400 mt-2 sm:mt-0">
                                                Total: E{total}
                                            </p>
                                            <p className="text-black/70 text-sm mt-1 sm:mt-0">
                                                {new Date(activity.id).toLocaleString()}
                                            </p>

                                            <div className="flex gap-2 ml-auto sm:ml-4 mt-2 sm:mt-0">
                                                {activity.status === "Pending" && (
                                                    <button
                                                        onClick={() => markAsReady(activity.id)}
                                                        className="px-4 py-2 bg-yellow-400 text-black rounded-xl hover:shadow-lg transition"
                                                    >
                                                        Mark as Ready
                                                    </button>
                                                )}
                                                <button
                                                    onClick={() => downloadActivity(activity)}
                                                    className="px-4 py-2 bg-yellow-400 text-black rounded-xl hover:shadow-lg transition flex items-center gap-2"
                                                >
                                                    Download PDF
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    )}
                </main>
            </div>
        </div>

    );
}
